(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{678:function(r,e,a){"use strict";a.r(e);var i=a(8),t=Object(i.a)({},(function(){var r=this,e=r.$createElement,a=r._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("p",[r._v("Android 系统源码里编程语言：")]),r._v(" "),a("ul",[a("li",[r._v("汇编：bootloader和kernel中可能会用到")]),r._v(" "),a("li",[r._v("C语言：这你丫不会，你玩毛的Linux Kernel啊")]),r._v(" "),a("li",[r._v("C++：这你丫不会，你就别搞Android底层开发了，HAL和中间库")]),r._v(" "),a("li",[r._v("Java：这么再不会就自杀吧，framework和app的代码都是Java的")]),r._v(" "),a("li",[r._v("Python：这个不会么也没事，编译相关的")]),r._v(" "),a("li",[r._v("Shell：脚本")]),r._v(" "),a("li",[r._v("Makefile：肯定会的，不会跳楼吧")])]),r._v(" "),a("h2",{attrs:{id:"android-8-以后的系统架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-8-以后的系统架构"}},[r._v("#")]),r._v(" Android 8 以后的系统架构")]),r._v(" "),a("p",[a("img",{attrs:{src:"https://source.android.com/devices/images/ape_fwk_all.png",alt:"Android 8"}})]),r._v(" "),a("h3",{attrs:{id:"应用框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用框架"}},[r._v("#")]),r._v(" 应用框架")]),r._v(" "),a("h3",{attrs:{id:"binder-ipc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binder-ipc"}},[r._v("#")]),r._v(" "),a("a",{attrs:{href:"http://gityuan.com/2015/10/31/binder-prepare/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Binder IPC"),a("OutboundLink")],1)]),r._v(" "),a("h3",{attrs:{id:"系统服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统服务"}},[r._v("#")]),r._v(" 系统服务")]),r._v(" "),a("h3",{attrs:{id:"硬件抽象层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#硬件抽象层"}},[r._v("#")]),r._v(" 硬件抽象层")]),r._v(" "),a("h3",{attrs:{id:"linux内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux内核"}},[r._v("#")]),r._v(" Linux内核")]),r._v(" "),a("h2",{attrs:{id:"android-8-之前的系统架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-8-之前的系统架构"}},[r._v("#")]),r._v(" Android 8 之前的系统架构")]),r._v(" "),a("p",[r._v("Android的架构是分层的，非常清晰，分工很明确。"),a("br"),r._v("\nAndroid本身是一套软件堆叠(Software Stack)，或称为「软件叠层架构」，"),a("br"),r._v("\n叠层主要分成三层：操作系统、中间件、应用程序。"),a("br"),r._v("\nAndroid系统分为4层，包括：")]),r._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2018/04/04/5ac48d2aef2af.png",alt:"fuck.png"}})]),r._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2018/05/23/5b04c5f528ca7.png",alt:"image001.png"}})]),r._v(" "),a("p",[r._v("HIDL：HIDL 是用于指定 HAL 与其用户之间接口的一个接口描述语言（Interface Description Language），它允许将指定的类型与函数调用收集到接口（Interface）和包（Package）中。更广泛地说，HIDL 是一个可以让那些独立编译的代码库（Libraries）之间进行通信的系统。 HIDL 实际上是用于进行进程间通信（Inter-process Communication，IPC）的。进程间的通信可以称为 Binder 化（Binderized）。对于必须连接到进程的库，也可以使用 passthough 模式（但在Java中不支持）。 HIDL 将指定的数据结构与方法签名组织到接口中，这些接口又会被收集到包中以供使用。它的语法与 C++、JAVA 是类似的，不过关键字集合不尽相同。其注释风格与 JAVA 是一致的。"),a("br"),r._v("\nAIDL: 接口定义语言，在 Android 中，一个进程通常无法访问另一个进程的内存。因此，为进行通信，进程需将其对象分解成可供操作系统理解的原语，并将其编组为可供您操作的对象。编写执行该编组操作的代码较为繁琐，因此 Android 会使用 AIDL 为您处理此问题。")]),r._v(" "),a("h3",{attrs:{id:"linux内核-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux内核-2"}},[r._v("#")]),r._v(" Linux内核")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("Android的核心系统服务依赖于Linux内核，如\n\n- 安全性\n- 内存管理\n- 进程管理\n- 网络协议栈\n- 驱动模型\n\nLinux 内核也同时作为硬件和软件栈之间的抽象层\n\n驱动：\n- 显示驱动（Display Driver）\n- 摄像头驱动（Camera Driver）\n- 键盘驱动（Keypad Driver）\n- 蓝牙驱动（Bluetooth Driver）\n- WiFi驱动（WIFI Driver）\n- Audio驱动（Audio Driver）\n- Binder（IPC）驱动\n- 电源管理（Power Manager）\n- M-Systems驱动\n")])])]),a("h3",{attrs:{id:"系统库-libraries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统库-libraries"}},[r._v("#")]),r._v(" 系统库（Libraries）")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("Android包含一个C/C++库的集合，供Android系统的各个组件使用。这些功能通过Android的应用程序框架（application framework）暴露给开发者。下面列出一些核心库：\n\n- 界面管理（Surface Manager）\n- 多媒体框架（Media Framework）\n- SQLite\n- 字体引擎（FreeType）\n- 图形处理3D库（OpenGL|ES）\n- SGL\n- 浏览器（WebKit）\n- 安全套接层（SSL）\n- C库\n")])])]),a("h3",{attrs:{id:"android运行环境-android-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android运行环境-android-runtime"}},[r._v("#")]),r._v(" Android运行环境（Android Runtime）")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("- Core Libraries \n- Dalvik Virtual Machine \n\nCore Libraries 提供大部分在Java编程语言核心类库中可用的功能\n\n\nDalvik Virtual Machine，每一个Android应用程序是Dalvik虚拟机中的实例，运行在他们自己 的进程中。Dalvik虚拟机设计成，在一个设备可以高效地运行多个虚拟机。Dalvik虚拟机可执行文件格式是.dex，dex格式是专为Dalvik 设计的一种压缩格式，适合内存和处理器速度有限的系统。大多数虚拟机包括JVM都是基于栈的，而Dalvik虚拟机则是基于寄存器的。 两种架构各有优劣，一般而言，基于栈的机器需要更多指令，而基于寄存器的机器指令更大。dx 是一套工具，可以將 Java .class 转换成 .dex 格式。一个dex文件通常会有多个.class。由于dex有時必须进行最佳化，会使文件大小增加1-4倍，以ODEX结尾。Dalvik虚拟机依赖于Linux 内核提供基本功能，如线程和底层内存管理。\n")])])]),a("h3",{attrs:{id:"应用程序框架层-application-framework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用程序框架层-application-framework"}},[r._v("#")]),r._v(" 应用程序框架层（Application Framework）")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("Android的应用程序框架为应用程序层的开发者提供APIs，它实际上是一个应用程序的框架,应用程序的体系结构旨在简化组件的重用，任何应用程序都能发布他的功能且任何其他应用程序可以使用这些功能（需要服从框架执行的安全限制）。这一机制允许用户替换组件。。由于上层的应用程序是以JAVA构建的，因此本层次提供的首先包含了UI程序中所需要的各种控件：例如： Views (视图组件)包括 lists(列表), grids(栅格), text boxes(文本框), buttons(按钮)等。甚至一个嵌入式的Web浏览器。\n\n- [活动管理器(Activity Manager Services)](\\framework\\ActivityManager.md)\n- [窗口管理器（Window Manager Services）]()\n- [内容提供者（Content Providers）]()\n- [视图系统（View Systems）]()\n- [通知管理器（Notification Manager）]()\n- [包管理器（Package Manager）]()\n- [电话管理器（Telephony Manager）]()\n- [资源管理器（Resource Manager）]()\n- [定位管理层（Location Manager）]()\n- [XMPP Service]()\n")])])]),a("h3",{attrs:{id:"应用程序层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用程序层"}},[r._v("#")]),r._v(" 应用程序层")]),r._v(" "),a("p",[r._v("Android的应用程序主要是用户界面（User Interface）方面的，通常以JAVA程序编写，其中还可以包含各种资源文件（放置在res目录中）JAVA程序及相关资源经过编译后，将生成一个APK包。"),a("br"),r._v("\nAndroid本身提供了主屏幕（Home），联系人（Contact），电话（Phone），浏览器（Browers）等众多的核心应用。"),a("br"),r._v("\n同时应用程序的开发者还可以使用应用程序框架层的API实现自己的程序。这也是Android开源的巨大潜力的体现。")]),r._v(" "),a("h3",{attrs:{id:"系统服务-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统服务-2"}},[r._v("#")]),r._v(" 系统服务")]),r._v(" "),a("p",[r._v("SystemServer 是framework中非常重要的一个进程，它是在虚拟机启动后运行的第一个java进程，SystemServer启动其他系统服务，这些系统服务都是以一个线程的方式存在于SystemServer进程中。")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("EntropyService\t提供伪随机数")])]),r._v(" "),a("li",[a("p",[r._v("PowerManagerService\t电源管理服务")])]),r._v(" "),a("li",[a("p",[r._v("ActivityManagerService\t最核心的服务之一，管理Activity")])]),r._v(" "),a("li",[a("p",[r._v("TelephonyRegistry\t通过该服务注册电话模块的事件响应，比如重启、关闭、启动等")])]),r._v(" "),a("li",[a("p",[r._v("PackageManagerService\t程序包管理服务")])]),r._v(" "),a("li",[a("p",[r._v("AccountManagerService\t账户管理服务，是指联系人账户，而不是Linux系统的账户")])]),r._v(" "),a("li",[a("p",[r._v("ContentService\tContentProvider服务，提供跨进程数据交换")])]),r._v(" "),a("li",[a("p",[r._v("BatteryService\t电池管理服务")])]),r._v(" "),a("li",[a("p",[r._v("LightsService\t自然光强度感应传感器服务")])]),r._v(" "),a("li",[a("p",[r._v("VibratorService\t震动器服务")])]),r._v(" "),a("li",[a("p",[r._v("AlarmManagerService\t定时器管理服务，提供定时提醒服务")])]),r._v(" "),a("li",[a("p",[r._v("WindowManagerService\tFramework最核心的服务之一，负责窗口管理")])]),r._v(" "),a("li",[a("p",[r._v("BluetoothService\t蓝牙服务")])]),r._v(" "),a("li",[a("p",[r._v("DevicePolicyManagerService\t提供一些系统级别的设置及属性")])]),r._v(" "),a("li",[a("p",[r._v("StatusBarManagerService\t状态栏管理服务")])]),r._v(" "),a("li",[a("p",[r._v("ClipboardService\t系统剪切板服务")])]),r._v(" "),a("li",[a("p",[r._v("InputMethodManagerService\t输入法管理服务")])]),r._v(" "),a("li",[a("p",[r._v("NetStatService\t网络状态服务")])]),r._v(" "),a("li",[a("p",[r._v("NetworkManagementService\t网络管理服务")])]),r._v(" "),a("li",[a("p",[r._v("ConnectivityService\t网络连接管理服务")])]),r._v(" "),a("li",[a("p",[r._v("AccessibilityManagerService\t辅助管理程序截获所有的用户输入，并根据这些输入给用户一些额外的反馈，起到辅助的效果")])]),r._v(" "),a("li",[a("p",[r._v("MountService\t挂载服务，可通过该服务调用Linux层面的mount程序")])]),r._v(" "),a("li",[a("p",[r._v("NotificationManagerService\t通知栏管理服务，Android中的通知栏和状态栏在一起，只是界面上前者在左边，后者在右边")])]),r._v(" "),a("li",[a("p",[r._v("DeviceStorageMonitorService\t磁盘空间状态检测服务")])]),r._v(" "),a("li",[a("p",[r._v("LocationManagerService\t地理位置服务")])]),r._v(" "),a("li",[a("p",[r._v("SearchManagerService\t搜索管理服务")])]),r._v(" "),a("li",[a("p",[r._v("DropBoxManagerService\t通过该服务访问Linux层面的Dropbox程序")])]),r._v(" "),a("li",[a("p",[r._v("WallpaperManagerService\t墙纸管理服务，墙纸不等同于桌面背景，在View系统内部，墙纸可以作为任何窗口的背景")])]),r._v(" "),a("li",[a("p",[r._v("AudioService\t音频管理服务")])]),r._v(" "),a("li",[a("p",[r._v("BackupManagerService\t系统备份服务")])]),r._v(" "),a("li",[a("p",[r._v("AppWidgetService\t        Widget服务")])]),r._v(" "),a("li",[a("p",[r._v("RecognitionManagerService\t身份识别服务")])]),r._v(" "),a("li",[a("p",[r._v("DiskStatsService\t磁盘统计服务")])])]),r._v(" "),a("h3",{attrs:{id:"核心服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心服务"}},[r._v("#")]),r._v(" 核心服务")]),r._v(" "),a("ul",[a("li",[r._v("ActivityManagerService")]),r._v(" "),a("li",[r._v("WindowManagerService")]),r._v(" "),a("li",[r._v("Android Graphics系统\n"),a("ul",[a("li",[r._v("Surfaceflinger")]),r._v(" "),a("li",[r._v("PackageManagerService")]),r._v(" "),a("li",[r._v("Input系统")])])])]),r._v(" "),a("h3",{attrs:{id:"系统应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统应用"}},[r._v("#")]),r._v(" 系统应用")]),r._v(" "),a("ul",[a("li",[r._v("System UI")]),r._v(" "),a("li",[r._v("Launcher")])]),r._v(" "),a("h2",{attrs:{id:"相关解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关解释"}},[r._v("#")]),r._v(" 相关解释")]),r._v(" "),a("h3",{attrs:{id:"hidl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hidl"}},[r._v("#")]),r._v(" HIDL")]),r._v(" "),a("p",[r._v("HIDL 读作 hide-l，全称是 Hardware Interface Definition Language。它在 Android Project Treble 中被起草，在 Android 8.0 中被全面使用，其诞生目的是"),a("strong",[r._v("使 Android 可以在不重新编译 HAL 的情况下对 Framework 进行 OTA 升级")])]),r._v(" "),a("p",[r._v("使用 HIDL 描述的 HAL 描述文件替换旧的用头文件描述的 HAL 文件的过程称为 *** HAL 的 binder 化（binderization）。所有运行 Android O 的设备都必须只支持 binder 化后的 HAL 模块。**"),a("br"),r._v("\n　　已发布的 HIDL package包位于 Android 代码库的hardware/interfaces/或vendor/vendorName目录下。使用 HDIL 描述的 HAL 接口存放在这些目录下的.hal文件中。比如我们可以在hardware/interfaces/audio/2.0/目录下找到部分 Audio HAL 描述文件")]),r._v(" "),a("h3",{attrs:{id:"bp文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bp文件"}},[r._v("#")]),r._v(" .bp文件")]),r._v(" "),a("p",[r._v("Android.bp是用来替换Android.mk的配置文件，它使用"),a("a",{attrs:{href:"https://github.com/google/blueprint/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Blueprint"),a("OutboundLink")],1),r._v("框架来解析。Blueprint是生成、解析Android.bp的工具，是Soong的一部分。Soong则是专为Android编译而设计的工具，Blueprint只是解析文件的形式，而Soong则解释内容的含义，最终转换成"),a("a",{attrs:{href:"https://ninja-build.org/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Ninja"),a("OutboundLink")],1),r._v("文件。")]),r._v(" "),a("h3",{attrs:{id:"rc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rc"}},[r._v("#")]),r._v(" .rc")]),r._v(" "),a("h3",{attrs:{id:"soong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soong"}},[r._v("#")]),r._v(" Soong")]),r._v(" "),a("p",[a("a",{attrs:{href:"https://android.googlesource.com/platform/build/soong/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Soong"),a("OutboundLink")],1)]),r._v(" "),a("h3",{attrs:{id:"android-bsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-bsp"}},[r._v("#")]),r._v(" Android BSP")]),r._v(" "),a("p",[r._v("Android BSP， 基本可以理解为：")]),r._v(" "),a("ul",[a("li",[r._v("linux 驱动")]),r._v(" "),a("li",[r._v("linux BSP （CPU，电源管理比驱动更深入的硬件支持包）")]),r._v(" "),a("li",[r._v("Android HAL层")])]),r._v(" "),a("p",[r._v("首先，熟悉linux kernel，linux driver的基本架构，熟悉C语言，懂得基本硬件知识，能看懂电路图。"),a("br"),r._v("\n其次，要熟悉linux系统编程，因为很多HAL层或者一些硬件的适配需要编写应用层软件来适配，尤其是Android定制性比较高。"),a("br"),r._v("\n再次，需要了解构建Android环境需要的知识，如makefile，打包，烧写等知识。")]),r._v(" "),a("h2",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[r._v("#")]),r._v(" Other")]),r._v(" "),a("ul",[a("li",[r._v("adb命令")]),r._v(" "),a("li",[r._v("Handler")]),r._v(" "),a("li",[r._v("Activity启动流程")]),r._v(" "),a("li",[r._v("Binder机制")]),r._v(" "),a("li",[r._v("AIDL原理")]),r._v(" "),a("li",[r._v("Android图像显示相关流程，VSync信号，SurfaceFlinger到FrameBuffer")]),r._v(" "),a("li",[r._v("App启动模式")])])])}),[],!1,null,null,null);e.default=t.exports}}]);