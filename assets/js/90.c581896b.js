(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{688:function(_,v,t){"use strict";t.r(v);var a=t(8),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"六大基本原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六大基本原则"}},[_._v("#")]),_._v(" 六大基本原则")]),_._v(" "),t("h3",{attrs:{id:"_1-单一职责原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-单一职责原则"}},[_._v("#")]),_._v(" 1. 单一职责原则")]),_._v(" "),t("p",[_._v("全称：Single Responsibility Principle")]),_._v(" "),t("p",[_._v("缩写：SRP")]),_._v(" "),t("p",[_._v("定义：一个类应该有且只有一个变化的原因（There should never be more than one reason for a class to change.）")]),_._v(" "),t("p",[_._v("定义解读：《UNIX编程艺术》中提到的一句话和这篇文章很贴切：Do one thing,and do it well。通俗的说，即一个类只负责一项职责")]),_._v(" "),t("h3",{attrs:{id:"_2-开闭原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-开闭原则"}},[_._v("#")]),_._v(" 2. 开闭原则")]),_._v(" "),t("p",[_._v("全称：Open Close Principle")]),_._v(" "),t("p",[_._v("缩写：OCP")]),_._v(" "),t("p",[_._v("定义：一个软件实体(如类、模块、函数)应当对扩展开放，对修改关闭。")]),_._v(" "),t("p",[_._v("定义解读：")]),_._v(" "),t("h3",{attrs:{id:"_3-里氏替换原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-里氏替换原则"}},[_._v("#")]),_._v(" 3. 里氏替换原则")]),_._v(" "),t("p",[_._v("全称：Liskov Substitution principle")]),_._v(" "),t("p",[_._v("缩写：LSP")]),_._v(" "),t("p",[_._v("定义：任何一个基类可以出现地方，子类一定可以出现，并且不会产生任何错误（注意：必须是父子关系）")]),_._v(" "),t("p",[_._v("定义解读：第一个注意：里氏替换原则核心就是抽象（继承和接口）每一个子类都会拥有父类的方法属性")]),_._v(" "),t("p",[_._v("第二个注意：开闭原则和里氏替换原则生死相依，通过里氏替换原则达到了对外开放，对修改关闭")]),_._v(" "),t("p",[_._v("里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：")]),_._v(" "),t("ul",[t("li",[_._v("子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。")]),_._v(" "),t("li",[_._v("子类中可以增加自己特有的方法。")]),_._v(" "),t("li",[_._v("当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。")]),_._v(" "),t("li",[_._v("当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。")])]),_._v(" "),t("h3",{attrs:{id:"_4-依赖导致原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-依赖导致原则"}},[_._v("#")]),_._v(" 4. 依赖导致原则")]),_._v(" "),t("p",[_._v("全称：Dependence Inversion Principle")]),_._v(" "),t("p",[_._v("缩写：DIP")]),_._v(" "),t("p",[_._v("定义：高层次模块不依赖于低层次模块实现细节")]),_._v(" "),t("p",[_._v("定义解读：说白了，依赖于抽象，不依赖具体实现指导子类实现功能细节，依赖倒置原则的核心就是要我们面向接口编程，理解了面向接口编程，也就理解了依赖倒置。")]),_._v(" "),t("h3",{attrs:{id:"_5-接口隔离原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-接口隔离原则"}},[_._v("#")]),_._v(" 5. 接口隔离原则")]),_._v(" "),t("p",[_._v("全称：Interface Segregation Principle")]),_._v(" "),t("p",[_._v("缩写：ISP")]),_._v(" "),t("p",[_._v("定义：类与类之间的依赖关系应该是建立在最小的接口上")]),_._v(" "),t("h3",{attrs:{id:"_6-迪米特原则-最少知识原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-迪米特原则-最少知识原则"}},[_._v("#")]),_._v(" 6. 迪米特原则--最少知识原则")]),_._v(" "),t("p",[_._v("全称：Least Knowledge Principle")]),_._v(" "),t("p",[_._v("缩写：LKP")]),_._v(" "),t("p",[_._v("定义：一个对象应该对其他的对象有最少的了解")]),_._v(" "),t("h2",{attrs:{id:"设计原则总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计原则总结"}},[_._v("#")]),_._v(" 设计原则总结")]),_._v(" "),t("p",[_._v("六大基本原则都是基于抽象（抽象类和接口）")]),_._v(" "),t("h1",{attrs:{id:"设计模式-设计模式是一种设计思想-为了可扩展性和健壮性本质是解耦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式-设计模式是一种设计思想-为了可扩展性和健壮性本质是解耦"}},[_._v("#")]),_._v(" 设计模式（设计模式是一种设计思想，为了可扩展性和健壮性本质是解耦）")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("单例模式")])]),_._v(" "),t("li",[t("strong",[_._v("工厂模式")])]),_._v(" "),t("li",[t("strong",[_._v("观察者模式")])]),_._v(" "),t("li",[_._v("原型模式")]),_._v(" "),t("li",[_._v("代理模式")]),_._v(" "),t("li",[_._v("策略模式")]),_._v(" "),t("li",[_._v("模板模式")])]),_._v(" "),t("h2",{attrs:{id:"架构师的目的是为了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构师的目的是为了什么"}},[_._v("#")]),_._v(" 架构师的目的是为了什么")]),_._v(" "),t("ul",[t("li",[_._v("针对开发者")]),_._v(" "),t("li",[_._v("针对公司")]),_._v(" "),t("li",[_._v("针对客户")])]),_._v(" "),t("p",[_._v("其实架构师就是编程思想")]),_._v(" "),t("p",[_._v("架构师每天都在思考什么")]),_._v(" "),t("ul",[t("li",[_._v("应该如何让我的系统更快")]),_._v(" "),t("li",[_._v("如何避免系统出现瓶颈")])]),_._v(" "),t("p",[_._v("宏观思维，四个架构图解决三个属性")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("四个架构图")]),_._v(" "),t("ul",[t("li",[_._v("业务架构图"),t("br"),_._v("\n阐述整体业务在一定抽象层次的高度模块化")]),_._v(" "),t("li",[_._v("技术架构图"),t("br"),_._v("\n用什么样的中间件体系来实现可扩展性、可伸缩性、安全性")]),_._v(" "),t("li",[_._v("数据架构图"),t("br"),_._v("\n用什么样的存储体系来支撑预判的一个数据规模、数据增长速度")]),_._v(" "),t("li",[_._v("部署架构图"),t("br"),_._v("\n使用多少台服务器、多少颗cpu以及多少个cpu内核数，还有sas、sata、ssd的一个有效配比来形成一套有机的硬件体系来保证系统的高可用性")])])]),_._v(" "),t("li",[t("p",[_._v("属性")]),_._v(" "),t("ul",[t("li",[_._v("可扩展性")]),_._v(" "),t("li",[_._v("可伸缩性")]),_._v(" "),t("li",[_._v("安全性")])])])]),_._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47939015",target:"_blank",rel:"noopener noreferrer"}},[_._v("TOGAF"),t("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);