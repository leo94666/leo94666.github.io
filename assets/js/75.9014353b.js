(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{672:function(s,t,a){"use strict";a.r(t);var _=a(8),e=Object(_.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"linux介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux介绍"}},[s._v("#")]),s._v(" Linux介绍")]),s._v(" "),a("p",[s._v("Linux是开源的操作系统"),a("br"),s._v("\nLinux一切皆文件，对于文件的操作种类有哪些")]),s._v(" "),a("ul",[a("li",[s._v("创建文件")]),s._v(" "),a("li",[s._v("编辑文件")]),s._v(" "),a("li",[s._v("保存文件")]),s._v(" "),a("li",[s._v("关闭文件")]),s._v(" "),a("li",[s._v("重命名文件")]),s._v(" "),a("li",[s._v("删除文件")]),s._v(" "),a("li",[s._v("恢复文件")])]),s._v(" "),a("h3",{attrs:{id:"linux目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux目录结构"}},[s._v("#")]),s._v(" Linux目录结构")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("\nbin: 全称binary，含义二进制，该目录存储的都是一些二进制文件，文件都是可以被运行的\nboot\ncdrom\nDesktop\ndev:该目录主要存放的是外接设备，例如盘，光盘，在其中的外设设备是不能直接被使用的，需要挂载\netc:该目录主要存储一些配置文件\nhome：家\nHome\nlib\nlib32\nlib64\nlibx32\nlost+found\nmedia\nmnt:当外设设备需要挂载的时候，就需要挂载在mnt目录下\nopt\nproc：全称Process，该目录存放的是Linux运行的进程\nroot:该目录是root用户自己的家目录\nrun\nsbin:全称Super Binary，该目录也是存储一些可执行的二进制文件，但必须要super权限才可以执行\nsnap\nsrv\nsys\nTemplates\ntmp:表示临时的，当系统运行时候产生的的临时文件会存在该目录\nUsers\nusr:存放用户自己安装的软件\nvar:存放系统/程序的日志文件目录\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h2",{attrs:{id:"gcc编译器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gcc编译器"}},[s._v("#")]),s._v(" GCC编译器")]),s._v(" "),a("ul",[a("li",[s._v("GCC编译器支持编译Go、Objective-C、Objective-C++、Fortran、Ada、D、BRIG（HSAIL）等程序")]),s._v(" "),a("li",[s._v("使用gcc编译c代码")]),s._v(" "),a("li",[s._v("使用g++编译C++代码")])]),s._v(" "),a("h3",{attrs:{id:"编译过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译过程"}},[s._v("#")]),s._v(" 编译过程")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("1.预处理 Pre-Processing")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -E 选项指示编译器仅对输入文件进行预处理")]),s._v("\ng++ -E test.cpp -o test.i \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("2.编译 Compiling")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("-S 编译选项告诉g++在为C++代码产生了汇编语言后停止编译\ng++产生的汇编语言文件的缺省扩展名是.s\ng++ -S test.i -o test.s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("3.汇编 Assembling")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c告诉g++仅把源代码编译成机器语言的目标代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 缺省值是目标代码文件有一个.o的扩展名")]),s._v("\ng++ -C test.s -o test.o\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("4.链接 Linking")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("-o 编译选项来为将产生的可执行文件用指定的文件名\ng++ test.o -o "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("h3",{attrs:{id:"g-重要编译参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g-重要编译参数"}},[s._v("#")]),s._v(" g++重要编译参数")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("-g 编译带调试信息的可执行文件")])]),s._v(" "),a("li",[a("p",[s._v("O[n] 优化源代码")])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -O 同时减少代码长度和执行时间，等价于 -O1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -O0 表示不做优化")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -O1 默认优化")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -O2 除了完成-O1的优化之外，还进行额外的调整工作，如指令调整等")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -o3 包括循环展开和其他一些与处理特性相关的优化工作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编译速度变慢，执行速度加快")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\ng++ -O2 test.cpp\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("-l | -L 指定库文件|指定库文件路径")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -l参数用来指定程序要链接的库，-l紧跟的就是库名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 链接glob库")]),s._v("\ng++ -lglob test.cpp\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果库文件没有放在以上三个目录里，需要使用-l参数制定库文件路径所在的目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -L 参数紧跟着的就是库文件所在的目录名")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 链接mylib库，mylib.so库在~/test/mylib/目录下")]),s._v("\ng++ -L/~/test/mylib/ -lmylib test.cpp\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("-I 指定头文件搜索路径")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -I")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /usr/include目录一般是不用指定的，gcc知道去那里找，但 是如果头文件不在/usr/icnclude")]),s._v("\n里我们就要用-I参数指定了，比如头文件放在/myinclude目录里，那编译命令行就要加上I/myinclude 参数了，如果不加你会得到一个”xxxx.h: No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory”的错\n误。-I参数可以用相对路径，比如头文件在当前 目录，可以用-I.来指定。上面我们提到的–cflags参\n数就是用来生成-I参数的\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("WaLL 打印警告信息")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印出gcc提供的警告信息")]),s._v("\ng++ -Wall test.cpp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("-w 关闭警告信息")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关闭所有警告信息")]),s._v("\ng++ -w test.cpp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("-std=c++ 设置编译标准")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 c++11 标准编译 test.cpp")]),s._v("\ng++ -std"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c++11 test.cpp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("-o 制定输出文件")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定即将产生的文件名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定输出可执行文件名为test")]),s._v("\ng++ test.cpp -o "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("-D 定义宏")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在使用gcc/g++编译的时候定义宏")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 常用场景：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -DDEBUG 定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"gdb调试器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gdb调试器"}},[s._v("#")]),s._v(" GDB调试器")]),s._v(" "),a("ul",[a("li",[s._v("GDB(GNU Debugger)是一个用来调试c/c++程序的功能强大的调试器，是Linux系统开发c/c++最常见的调试器")]),s._v(" "),a("li",[s._v("GDB可以跟踪程序中的错误，从而减少程序员的工作量")])]),s._v(" "),a("p",[s._v("GDB主要功能")]),s._v(" "),a("ul",[a("li",[s._v("设置断点")]),s._v(" "),a("li",[s._v("使程序在指定的代码上暂停执行，便于观察")]),s._v(" "),a("li",[s._v("单布执行程序，便于调试")]),s._v(" "),a("li",[s._v("查看程序中变量值的变化")]),s._v(" "),a("li",[s._v("动态改变程序的执行环境")]),s._v(" "),a("li",[s._v("分析崩溃程序产生的core文件")])]),s._v(" "),a("p",[s._v("进入调试")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("\n// g++方式\ng++ -g test.cpp -o "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n\n// cmake方式，-g\nset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CMAKE_CXX_FLAGS "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${CMAKE_CXX_FLAGS}")]),s._v(' -std=c++11 -g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ngdb ./test\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"常用调试参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用调试参数"}},[s._v("#")]),s._v(" 常用调试参数")]),s._v(" "),a("h3",{attrs:{id:"常用调试命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用调试命令"}},[s._v("#")]),s._v(" 常用调试命令")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("命令")]),s._v(" "),a("th",[s._v("案例")]),s._v(" "),a("th",[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("start")]),s._v(" "),a("td",[s._v("(gdb) start")]),s._v(" "),a("td",[s._v("开始调试,停在第一行代码处")])]),s._v(" "),a("tr",[a("td",[s._v("list")]),s._v(" "),a("td",[s._v("(gdb) l 5 "),a("br"),s._v(" (gdb) l main "),a("br"),s._v(" (gdb) list "),a("br"),s._v("(gdb) l -")]),s._v(" "),a("td",[s._v("查看第5行周围代码"),a("br"),s._v(" 查看函数为main函数周围的代码"),a("br"),s._v("查看当前行的后面的代码"),a("br"),s._v("查看当前行的前面代码")])]),s._v(" "),a("tr",[a("td",[s._v("break")]),s._v(" "),a("td",[s._v("(gdb) break function "),a("br"),s._v(" (gdb) break lineNumber "),a("br"),s._v(" (gdb) break +offset/-offset "),a("br"),s._v(" (gdb) break filename:lineNumber"),a("br"),s._v("(gdb) break filename:function "),a("br"),s._v(" (gdb) break *address "),a("br"),s._v(" (gdb) break "),a("br"),s._v(" (gdb) break ... if condition")]),s._v(" "),a("td",[s._v("在指定的函数添加断点"),a("br"),s._v("在指定的代码行打断点"),a("br"),s._v("在当前行的前或后面的offset行打断点，offset为自然数"),a("br"),s._v(" 在名称为filename的文件中的第lineNumber行打断点"),a("br"),s._v("在名称为filename的文件中的function函数打断点"),a("br"),s._v(" 在程序运行的内存地址处打断点"),a("br"),s._v(" 在下一条命令处停止运行"),a("br"),s._v("??")])]),s._v(" "),a("tr",[a("td",[s._v("delete")]),s._v(" "),a("td",[s._v("(gdb) delete")]),s._v(" "),a("td",[s._v("删除所有断点")])]),s._v(" "),a("tr",[a("td",[s._v("next")]),s._v(" "),a("td",[s._v("(gdb) next 5")]),s._v(" "),a("td",[s._v("单步跟踪，如果有函数调用不会进入函数，如果后面不加"),a("br"),s._v("count表示一条一条的执行，加count表示执行后面的count条指令")])]),s._v(" "),a("tr",[a("td",[s._v("step")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("set step-mode")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("finish")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("util")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("stepi")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("nexti")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("continue")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("print")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("watch")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("return")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("info")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("run")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("quit")]),s._v(" "),a("td"),s._v(" "),a("td")])])]),s._v(" "),a("h2",{attrs:{id:"clang编译器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clang编译器"}},[s._v("#")]),s._v(" Clang编译器")]),s._v(" "),a("h3",{attrs:{id:"与gcc差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与gcc差异"}},[s._v("#")]),s._v(" 与GCC差异")]),s._v(" "),a("h2",{attrs:{id:"cmake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[s._v("#")]),s._v(" CMake")]),s._v(" "),a("ul",[a("li",[s._v("Cmake是一个跨平台的安装编译工具、可以用简单的语句描述所有平台的安装（编译过错）")]),s._v(" "),a("li",[s._v("Cmake已经成为大部分C++开源项目标配")])]),s._v(" "),a("h3",{attrs:{id:"语法特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法特性"}},[s._v("#")]),s._v(" 语法特性")]),s._v(" "),a("ul",[a("li",[s._v("基本语法格式：指令(参数1 参数2 ...)\n"),a("ul",[a("li",[s._v("参数使用括弧")]),s._v(" "),a("li",[s._v("参数之间用空格或者分号分开")])])]),s._v(" "),a("li",[s._v("指令是大小写无关的，参数和变量是大小写相关的")]),s._v(" "),a("li",[s._v("变量使用${}方式取值，但是在IF控制语句中是直接使用变量名")])]),s._v(" "),a("h3",{attrs:{id:"重要指令和常用变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要指令和常用变量"}},[s._v("#")]),s._v(" 重要指令和常用变量")]),s._v(" "),a("h4",{attrs:{id:"重要指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要指令"}},[s._v("#")]),s._v(" 重要指令")]),s._v(" "),a("ul",[a("li",[s._v("cmake_mininum_required 指定Cmake的最小版本要求")]),s._v(" "),a("li",[s._v("project 定义工程名称，并可指定工程支持的语言")]),s._v(" "),a("li",[s._v("set 显式的定义变量")]),s._v(" "),a("li",[s._v("include_directions 向工程添加多个特定的头文件搜索路径")]),s._v(" "),a("li",[s._v("link_directions 向工程添加多个特定的库文件搜索路径")]),s._v(" "),a("li",[s._v("add_library 生成库文件")]),s._v(" "),a("li",[s._v("add_compile_options 添加编译参数")]),s._v(" "),a("li",[s._v("add_executable 生成可执行文件")]),s._v(" "),a("li",[s._v("target_link_libraries 为target添加要链接的共享库")]),s._v(" "),a("li",[s._v("add_subdirectory 向当前工程添加存放资源文件的子目录，并可以指定中间二进制和目标二进制存放的位置")]),s._v(" "),a("li",[s._v("aux_source_directory 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建文件列表")])]),s._v(" "),a("h4",{attrs:{id:"常用变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用变量"}},[s._v("#")]),s._v(" 常用变量")]),s._v(" "),a("ul",[a("li",[s._v("CMAKE_C_FLAGS  gcc编译选项")]),s._v(" "),a("li",[s._v("CMAKE_CXX_FLAGS g++编译选项")]),s._v(" "),a("li",[s._v("CMAKE_BUILD_TYPE 编译类型（Debug、Release）")]),s._v(" "),a("li",[s._v("CMAKE_BINARY_DIR\n"),a("ul",[a("li",[s._v("PROJECT_BINARY_DIR")]),s._v(" "),a("li",[s._v("_BINARY_DIR")])])]),s._v(" "),a("li",[s._v("CMAKE_SOURCE_DIR\n"),a("ul",[a("li",[s._v("PROJECT_SOURCE_DIR")]),s._v(" "),a("li",[s._v("_SOURCE_DIR")])])]),s._v(" "),a("li",[s._v("CMAKE_C_COMPILER 指定C编译器")]),s._v(" "),a("li",[s._v("CMAKE_CXX_COMPILER 指定C++编译器")]),s._v(" "),a("li",[s._v("EXECUTABLE_OUTPUT_PATH 可执行文件输出的存放路径")]),s._v(" "),a("li",[s._v("LIBRARY_OUTPUT_PATH 库文件输出的存放路径")])]),s._v(" "),a("h3",{attrs:{id:"cmake命令汇总"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake命令汇总"}},[s._v("#")]),s._v(" Cmake命令汇总")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("命令")]),s._v(" "),a("th",[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("cmake_minimum_required(VERSION 3.15)")]),s._v(" "),a("td",[s._v("CMake 支持的最低版本")])]),s._v(" "),a("tr",[a("td",[s._v("project(hello_cmake)")]),s._v(" "),a("td",[s._v("指定一个项目名称")])]),s._v(" "),a("tr",[a("td",[s._v("add_executable(hello_cmake main.cpp)")]),s._v(" "),a("td",[s._v("从指定的源文件构建指定的可执行文件。"),a("br"),s._v(" 参数1：可执行文件的名称；"),a("br"),s._v("参数2：源文件列表。")])]),s._v(" "),a("tr",[a("td",[s._v("add_library(hello_library STATIC src/hello.cpp)")]),s._v(" "),a("td",[s._v("从若干源文件创建库"),a("br"),s._v("参数１：目标"),a("br"),s._v("参数２："),a("br"),s._v("    STATIC：静态库"),a("br"),s._v("  SHARED：动态库"),a("br"),s._v("INTERFACE：不构建任何库,一般作为仅标头的库的标识"),a("br"),s._v("参数３：源文件列表")])]),s._v(" "),a("tr",[a("td",[s._v("add_library(hello::library ALIAS hello_library)")]),s._v(" "),a("td",[s._v("将 hello_library 取别名为 hello::library。")])]),s._v(" "),a("tr",[a("td",[s._v("target_include_directories(target PRIVATE ${PROJECT_SOURCE_DIR}/include)")]),s._v(" "),a("td",[s._v("指定在编译给定目标时要使用的包含目录。target 必须由诸如 add_executable() 或 add_library() 之类的命令创建。"),a("br"),s._v("参数１：目标；"),a("br"),s._v("参数２："),a("br"),s._v("PRIVATE：仅作为本目标的包含目录；"),a("br"),s._v("INTERFACE：其他目标链接到本目标时作为其他目标的包含目录；"),a("br"),s._v("PUBLIC：既作为本目标的包含目录，又作为连接到本目标的其他目标的包含目录。对于PUBLIC标头来说，最好令其拥有命名空间以避免命名冲突；"),a("br"),s._v("参数３：头文件路径。")])]),s._v(" "),a("tr",[a("td",[s._v("target_link_libraries(hello_binary PRIVATE hello_library)")]),s._v(" "),a("td",[s._v("使给定目标链接指定的库。")])]),s._v(" "),a("tr",[a("td",[s._v("install(TARGETS　cmake_examples_inst_bin　DESTINATION bin)")]),s._v(" "),a("td",[s._v("TARGET：要安装的目标；"),a("br"),s._v("DIRECTORY：要安装的目录；"),a("br"),s._v("FILES：要安装的文件；"),a("br"),s._v("DESTINATION：目标文件夹名。")])]),s._v(" "),a("tr",[a("td",[s._v("target_compile_definitions(cmake_examples_compile_flags PRIVATE EX3)")]),s._v(" "),a("td",[s._v("对给定目标指定 Flag。")])]),s._v(" "),a("tr",[a("td",[s._v("target_compile_options()")]),s._v(" "),a("td",[s._v("对给定目标指定编译器选项。")])]),s._v(" "),a("tr",[a("td",[s._v("find_package()")]),s._v(" "),a("td",[s._v("查找指定的包，格式见相应的 Find... .cmake 文件。")])]),s._v(" "),a("tr",[a("td",[s._v("target_compile_features(hello_cpp11 PUBLIC cxx_auto_type)")]),s._v(" "),a("td",[s._v("指定给定目标的编译特性（例如 C++ 标准）（CMake 3.1 后可用）。")])]),s._v(" "),a("tr",[a("td",[s._v("configure_file(http://ver.h.in ${PROJECT_BINARY_DIR}/ver.h @ONLY)")]),s._v(" "),a("td",[s._v("将参数1的文件配置后生成到参数2的文件。默认配置所有${}包裹和@@包裹的内容。@ONLY 表示仅允许配置@@包裹的内容。")])])])]),s._v(" "),a("h3",{attrs:{id:"cmake常见变量汇总"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake常见变量汇总"}},[s._v("#")]),s._v(" Cmake常见变量汇总")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("变量")]),s._v(" "),a("th",[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("CMAKE_SOURCE_DIR")]),s._v(" "),a("td",[s._v("根源目录")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_CURRENT_SOURCE_DIR")]),s._v(" "),a("td",[s._v("当前所在的源目录（如果使用子项目）")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_BINARY_DIR")]),s._v(" "),a("td",[s._v("根构建目录（运行 cmake 命令的目录）")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_CURRENT_BINARY_DIR")]),s._v(" "),a("td",[s._v("当前所在的构建目录")])]),s._v(" "),a("tr",[a("td",[s._v("PROJECT_SOURCE_DIR")]),s._v(" "),a("td",[s._v("当前项目的源目录")])]),s._v(" "),a("tr",[a("td",[s._v("PROJECT_BINARY_DIR")]),s._v(" "),a("td",[s._v("当前项目的构建目录")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_INSTALL_PREFIX")]),s._v(" "),a("td",[s._v("安装路径")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_BUILD_TYPE")]),s._v(" "),a("td",[s._v("构建类型（Release、Debug、MinSizeRel 或 RelWithDebInfo）")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_CXX_FLAGS")]),s._v(" "),a("td",[s._v("C++ Flags")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_C_FLAGS")]),s._v(" "),a("td",[s._v("C Flags")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_LINKER_FLAGS")]),s._v(" "),a("td",[s._v("链接器 Flags")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_MODULE_PATH")]),s._v(" "),a("td",[s._v("CMake 查找模块（find_package）的搜索路径")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_C_COMPILER")]),s._v(" "),a("td",[s._v("用于编译 C 的程序")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_CXX_COMPILER")]),s._v(" "),a("td",[s._v("用于编译 C++ 的程序")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_LINKER")]),s._v(" "),a("td",[s._v("用于链接的程序")])]),s._v(" "),a("tr",[a("td",[s._v("CMAKE_CXX_STANDARD")]),s._v(" "),a("td",[s._v("指定需要的 C++ 标准（CMake 3.1 后可用）")])]),s._v(" "),a("tr",[a("td",[s._v("PROJECT_NAME")]),s._v(" "),a("td",[s._v("当前使用 project() 创建的项目名称")])]),s._v(" "),a("tr",[a("td",[s._v("name_SOURCE_DIR")]),s._v(" "),a("td",[s._v("名为“name”的项目的源目录")])]),s._v(" "),a("tr",[a("td",[s._v("name_BINARY_DIR")]),s._v(" "),a("td",[s._v("名为“name”的项目的二进制目录")])])])]),s._v(" "),a("h3",{attrs:{id:"cmake编译工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake编译工程"}},[s._v("#")]),s._v(" CMake编译工程")]),s._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")])])])}),[],!1,null,null,null);t.default=e.exports}}]);