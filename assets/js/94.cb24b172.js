(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{692:function(s,a,t){"use strict";t.r(a);var e=t(8),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"栈的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈的基本概念"}},[s._v("#")]),s._v(" 栈的基本概念")]),s._v(" "),t("p",[s._v("栈(Stack)只允许在一端进行插入或者删除操作的线性表")]),s._v(" "),t("p",[s._v("FILO: Firt In Last Out")]),s._v(" "),t("h3",{attrs:{id:"基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[s._v("#")]),s._v(" 基本操作")]),s._v(" "),t("ul",[t("li",[s._v("InitStack(&S):初始化一个空栈")]),s._v(" "),t("li",[s._v("StackEmpty(S):判断栈是否为空，若栈为空则返回true，否则返回false")]),s._v(" "),t("li",[s._v("Push(&S,x):进栈，若栈S未满，则将x加入使之成为新栈顶")]),s._v(" "),t("li",[s._v("Pop(&S,&x):出栈，若栈非空，则弹出栈顶元素，并用x返回")]),s._v(" "),t("li",[s._v("GetTop(S,&x):读栈顶元素，若栈非空，则用x返回栈顶元素")]),s._v(" "),t("li",[s._v("ClearStack(&S):销毁栈，并释放S占用的内存空间")])]),s._v(" "),t("h3",{attrs:{id:"顺序栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序栈"}},[s._v("#")]),s._v(" 顺序栈")]),s._v(" "),t("p",[s._v("采用顺序存储的栈")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MaxSize")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MaxSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SqStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"共享栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#共享栈"}},[s._v("#")]),s._v(" 共享栈")]),s._v(" "),t("p",[s._v("将两个栈底设置在空间的两端，栈顶向空间中间延伸")]),s._v(" "),t("p",[s._v("判空：0号栈top==-1"),t("br"),s._v("\n1号栈top==MaxSize"),t("br"),s._v("\n栈满：top1-top0==1")]),s._v(" "),t("p",[s._v("优点:存取时间复杂度仍为O(1),但空间利用更有效")]),s._v(" "),t("h3",{attrs:{id:"链式栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链式栈"}},[s._v("#")]),s._v(" 链式栈")]),s._v(" "),t("p",[s._v("采用链式存储的栈")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("LiStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("所有操作都在表头执行")])]),s._v(" "),t("h2",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[s._v("#")]),s._v(" 队列")]),s._v(" "),t("p",[t("strong",[s._v("队列(Queue)"),t("strong",[s._v("只允许在表的")]),s._v("一端")]),s._v("进行插入，表的"),t("strong",[s._v("另一端")]),s._v("进行删除操作的"),t("strong",[s._v("线性表")])]),s._v(" "),t("h3",{attrs:{id:"基本操作-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-2"}},[s._v("#")]),s._v(" 基本操作")]),s._v(" "),t("ul",[t("li",[s._v("InitQueue(&Q):初始化一个空栈")]),s._v(" "),t("li",[s._v("QueueEmpty(Q):判断栈是否为空，若栈为空则返回true，否则返回false")]),s._v(" "),t("li",[s._v("EnQueue(&Q,x):入队，若队列Q未满，则将x加入使之成为新队尾")]),s._v(" "),t("li",[s._v("DeQueue(&Q,&x):出队，若队列非空，则删除队头元素，并用x返回")]),s._v(" "),t("li",[s._v("GetHead(Q,&x):读队头元素，若Q非空，则用x返回队头元素")]),s._v(" "),t("li",[s._v("ClearQueue(&Q):销毁队列，并释放Q占用的内存空间")])]),s._v(" "),t("h3",{attrs:{id:"顺序队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序队"}},[s._v("#")]),s._v(" 顺序队")]),s._v(" "),t("p",[s._v("采用顺序存储的队列")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MaxSize")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MaxSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  队头元素（队头元素的前一位置）")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//队尾元素的下一个位置（指向队尾元素）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("初始化front==rear==0"),t("br"),s._v("\n队空条件：Q.front == Q.rear"),t("br"),s._v("\n队长：Q.rear-Q.front")]),s._v(" "),t("h3",{attrs:{id:"循环队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环队列"}},[s._v("#")]),s._v(" 循环队列")]),s._v(" "),t("p",[s._v("把存储队列的顺序队列在逻辑上视为一个环")]),s._v(" "),t("p",[s._v("front指针移动：Q.front = (Q.front+1)% MaxSize"),t("br"),s._v("\nrear指针移动:Q.rear = (Q.rear+1)% MaxSize"),t("br"),s._v("\n队列长度：（Q.rear+MaxSize-Q.front）% MaxSize")]),s._v(" "),t("h3",{attrs:{id:"链队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链队"}},[s._v("#")]),s._v(" 链队")]),s._v(" "),t("p",[s._v("采用链式存储的队列")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    LinkNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("LinkQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"输出序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出序列"}},[s._v("#")]),s._v(" 输出序列")]),s._v(" "),t("h2",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")])])}),[],!1,null,null,null);a.default=n.exports}}]);